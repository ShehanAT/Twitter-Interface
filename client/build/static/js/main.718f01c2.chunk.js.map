{"version":3,"sources":["config.js","components/Footer.js","components/Content.js","components/Twitter.js","components/ErrorBoundary.js","App.js","serviceWorker.js","index.js","views/index.pug"],"names":["API_URL","Footer","react_default","a","createElement","href","title","className","react_fontawesome_lib_default","name","Content","allInfo","this","props","template","call","Component","Twitter","state","_this2","user","screen_name","axios","post","backend_URL","then","response","setState","data","console","log","Content_Content","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","hasError","error","errorInfo","style","whiteSpace","toString","componentStack","children","React","socket","io","App","startAuth","disabled","popup","openPopup","checkPopup","closeCard","on","close","_this3","check","setInterval","closed","undefined","clearInterval","left","window","innerWidth","width","top","innerHeight","height","url","concat","id","open","_this$state$user","photo","ErrorBoundary_ErrorBoundary","Twitter_Twitter","onClick","bind","index_es","icon","faTwitter","dist","fontSize","fontWeight","css","display","p","mx","my","bg","borderRadius","alignSelf","boxShadow","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.718f01c2.chunk.js","sourcesContent":["// module.exports = {\n//   consumer_key: process.env.CONSUMERKEY,\n//   consumer_secret: process.env.CONSUMERSECRET,\n//   access_token: process.env.ACCESSTOKEN,\n//   access_token_secret: process.env.ACCESSTOKENSECRET,\n//   timeout_ms: 60 * 1000 //optional HTTP request timeout to apply to all requests\n// };\nexport const API_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://agile-thicket-44316.herokuapp.com\"\n    : \"http://127.0.0.1:3000\";\n","import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\n\nexport default () => (\n  <footer>\n    <a\n      href=\"shehanatuk.com\"\n      title=\"Portfolio Site\"\n      className=\"small-button portfolio-site\"\n    >\n      <FontAwesome name=\"medium\" />\n    </a>\n    <a\n      href=\"https://github.com/ShehanAT\"\n      title=\"Github\"\n      className=\"small-button github-site\"\n    >\n      <FontAwesome name=\"github\" />\n    </a>\n  </footer>\n);\n","import React, { Component } from \"react\";\nimport template from \"../views/index.pug\";\n\nexport default class Content extends Component {\n  render() {\n    const { allInfo } = this.props;\n    return template.call(this, {\n      allInfo\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Box, Card, Image, Heading, Text } from \"rebass\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport \"../stylesheets/Twitter.scss\";\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faLogou } from \"@fortawesome/free-brands-svg-icons\";\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport FontAwesome from \"react-fontawesome\";\nimport axios from \"axios\";\nimport Content from \"./Content\";\nconst backend_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://agile-thicket-44316.herokuapp.com/\"\n    : \"http://localhost:3000\";\n//USE THIS CLASS TO DISPLAY TWIT CONTENTS\nexport default class Twitter extends Component {\n  state = { allInfo: {} };\n\n  componentDidMount() {\n    var user = {\n      screen_name: this.props.name\n    };\n    axios.post(backend_URL + \"/testing\", { user }).then((response) => {\n      this.setState({\n        allInfo: response.data\n      });\n      console.log(response.data);\n    });\n  }\n  render() {\n    // only errors thrown in render() will be caught by ErrorBoundary component\n    return (\n      <div className=\"container\">\n        <Content />\n        {/* <Card\n          fontSize={6}\n          fontWeight=\"bold\"\n          width={[1 / 5, 1 / 5, 1 / 5]} //first value is for < 640px, second value is for < 830px,third value is for > 831px\n          css={{\n            display: \"block\"\n          }}\n          p={3}\n          mx={2}\n          my={0}\n          bg=\"#f6f6ff\"\n          borderRadius={10}\n          alignSelf=\"center\"\n          boxShadow=\"0 2px 16px rgba(0, 0, 0, 0.25)\"\n        >\n          <img\n            src={this.props.photo}\n            alt={this.props.name}\n            className=\"profilePic\"\n          />\n          <h4>Welcome {`@${this.props.name}`}!</h4>\n          <ButtonToolbar>\n            <Button variant=\"danger\" onClick={this.props.closeCard}>\n              <FontAwesomeIcon\n                icon={faTimesCircle}\n                onClick={this.props.closeCard}\n              />\n              Logout\n            </Button>\n          </ButtonToolbar>\n        </Card> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    //Catchs error in any child components and re-renders them with error message\n    //Display fallback UI\n    this.setState({\n      hasError: true,\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      return (\n        <div>\n          {/* Emmet works only inside html elements */}\n          <h2>Something went wrong</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    return this.props.children;\n    // if no error in the children just render the children components\n  }\n}\n","import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport { API_URL } from \"./config\";\nimport \"./App.scss\";\nimport { Box, Card, Image, Heading, Text } from \"rebass\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport FontAwesome from \"react-fontawesome\";\nimport Footer from \"./components/Footer\";\nimport Twitter from \"./components/Twitter\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nconsole.log(API_URL);\nconst socket = io(API_URL);\nconst providers = [\"twitter\"];\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: {},\n      disabled: \"\"\n    };\n    this.popup = null;\n  }\n\n  componentDidMount() {\n    socket.on(\"user\", (user) => {\n      this.popup.close();\n      this.setState({ user });\n    });\n  }\n\n  checkPopup() {\n    const check = setInterval(() => {\n      const { popup } = this; // const { var } = this is equivalent to const popup = this.popup\n      if (!popup || popup.closed || popup.closed === undefined) {\n        clearInterval(check); //stop the interval if popup is closed/undefined\n        this.setState({ disabled: \"disabled\" }); //set disabled to true when the popup window is closed, so disable the Sign In button, use case: when user is signed in using the OAuth provider\n      }\n    }, 1000); //check if popup window is closed in 1 second intervals, if not closed wait until the popup window is closed to set this.state.disabled to \"disabled\" which signals the Sign in button to be disabled\n  }\n\n  startAuth = () => {\n    if (!this.state.disabled) {\n      //this.state.disable means the Sign in button is disabled\n      this.popup = this.openPopup(); // assigns the window object to this.popup variable\n      this.checkPopup(); //check if the popup window is closed\n      this.setState({ disabled: \"disabled\" }); //if reached this line the popup window is closed forsure\n    }\n  };\n\n  openPopup() {\n    //making and rendering the OAuth window\n    const width = 600;\n    const height = 600;\n    const left = window.innerWidth / 2 - width / 2;\n    const top = window.innerHeight / 2 - height / 2;\n    const url = `${API_URL}/twitter?socketId=${socket.id}`;\n\n    return window.open(\n      //opens a new browser window\n      url,\n      \"\",\n      `toolbar=no, location, directories=no, status=no, menubar=no,\n    scrollbars=no, resizable=no, copyhistory=no, width=${width}, \n    height=${height}, top=${top}, left=${left}` //defining the properties of the browser window to be created\n    );\n  }\n  closeCard = () => {\n    this.setState({\n      user: {},\n      disabled: \"\"\n    });\n  };\n\n  render() {\n    const { name, photo } = this.state.user; //equivalent to const name = this.state.user.name, const photo = this.state.user.photo\n    const { disabled } = this.state;\n    return (\n      <div className=\"App\">\n        <div className={\"container\"}>\n          {/* If there is a user show the name and photo */}\n          {/* If no user logged in show the login with Twitter button */}\n          {name ? (\n            <ErrorBoundary>\n              <Twitter name={name} photo={photo} closeCard={this.closeCard} />\n            </ErrorBoundary>\n          ) : (\n            <div className={\"button\"}>\n              <button\n                onClick={this.startAuth.bind(this)}\n                className={`twitter ${disabled}`}\n              >\n                <FontAwesomeIcon icon={faTwitter} />\n                Sign in with Twitter\n              </button>\n              <Card\n                fontSize={6}\n                fontWeight=\"bold\"\n                width={[1 / 5, 1 / 5, 1 / 5]} //first value is for < 640px, second value is for < 830px,third value is for > 831px\n                css={{\n                  display: \"block\"\n                }}\n                p={3}\n                mx={2}\n                my={0}\n                bg=\"#f6f6ff\"\n                borderRadius={10}\n                alignSelf=\"center\"\n                boxShadow=\"0 2px 16px rgba(0, 0, 0, 0.25)\"\n              >\n                Sample Text\n              </Card>\n            </div>\n          )}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot && process.env.NODE_ENV === \"development\") {\n  module.hot.accept(\"./LoadableApp\", () => {\n    const NextApp = require(\"./LoadableApp\").default;\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/index.a600f5e0.pug\";"],"sourceRoot":""}